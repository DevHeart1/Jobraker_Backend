# Generated by Django 4.2.23 on 2025-07-02 12:12

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("jobs", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="application",
            name="follow_up_reminder_sent_at",
            field=models.DateTimeField(
                blank=True,
                help_text="Timestamp of the last follow-up reminder sent for the 'follow_up_date'.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="interview_details",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text="Structured details about interviews (e.g., date, type, interviewer, notes).",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="offer_details",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Structured details about any job offer received.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="skyvern_response_data",
            field=models.JSONField(
                blank=True,
                help_text="Raw response data from Skyvern task results (e.g., confirmation, errors).",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="user_defined_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("interested", "Interested/Saved"),
                    ("preparing_application", "Preparing Application"),
                    ("applied", "Applied"),
                    ("assessment_phase", "Assessment/Test Phase"),
                    ("initial_interview", "Initial Interview"),
                    ("technical_interview", "Technical Interview"),
                    ("final_interview", "Final Interview/On-site"),
                    ("offer_pending", "Offer Pending Decision"),
                    ("offer_received_custom", "Offer Received (User Tracked)"),
                    ("negotiating", "Negotiating Offer"),
                    ("accepted_custom", "Offer Accepted (User Tracked)"),
                    ("rejected_by_me", "Declined by Me"),
                    ("rejected_by_company", "Rejected by Company (User Tracked)"),
                    ("archived", "Archived/Not Pursuing"),
                    ("other", "Other"),
                ],
                help_text="User's custom status for tracking application progress.",
                max_length=30,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="user_notes",
            field=models.TextField(
                blank=True, help_text="User's private notes for this application."
            ),
        ),
        migrations.AlterField(
            model_name="application",
            name="notes",
            field=models.TextField(
                blank=True, help_text="System or general notes about the application."
            ),
        ),
        migrations.AlterField(
            model_name="application",
            name="skyvern_task_id",
            field=models.CharField(
                blank=True,
                db_index=True,
                help_text="Task ID from Skyvern for auto-applications.",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="application",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("submitting_via_skyvern", "Submitting via Skyvern"),
                    ("submitted", "Submitted"),
                    ("under_review", "Under Review"),
                    ("interview_scheduled", "Interview Scheduled"),
                    ("interview_completed", "Interview Completed"),
                    ("offer_received", "Offer Received"),
                    ("accepted", "Accepted"),
                    ("rejected", "Rejected"),
                    ("withdrawn", "Withdrawn"),
                    ("failed_to_submit", "Failed to Submit"),
                    ("skyvern_submission_failed", "Skyvern Submission Failed"),
                    ("skyvern_canceled", "Skyvern Task Canceled"),
                    ("skyvern_requires_attention", "Skyvern Task Requires Attention"),
                ],
                default="pending",
                max_length=30,
            ),
        ),
        migrations.AlterField(
            model_name="application",
            name="submission_logs",
            field=models.JSONField(
                default=list,
                help_text="Application submission logs (can include Skyvern logs or manual entries).",
            ),
        ),
        migrations.CreateModel(
            name="RecommendedJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "score",
                    models.FloatField(
                        help_text="Similarity or match score (0.0 to 1.0).",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "algorithm_version",
                    models.CharField(
                        blank=True,
                        help_text="Version of the recommendation algorithm used.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending_review", "Pending Review"),
                            ("viewed", "Viewed"),
                            ("applied", "Applied"),
                            ("dismissed", "Dismissed"),
                            ("irrelevant", "Marked as Irrelevant"),
                        ],
                        db_index=True,
                        default="pending_review",
                        help_text="User's interaction status with this recommendation.",
                        max_length=20,
                    ),
                ),
                (
                    "recommended_at",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations_for_users",
                        to="jobs.job",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommended_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Recommended Job",
                "verbose_name_plural": "Recommended Jobs",
                "db_table": "recommended_jobs",
                "ordering": ["user", "-score", "-recommended_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "status", "-score"],
                        name="recommended_user_id_5edb59_idx",
                    )
                ],
                "unique_together": {("user", "job")},
            },
        ),
    ]
