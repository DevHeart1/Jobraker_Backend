name: Jobraker Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security and Code Quality Checks
  security:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety flake8 black isort
        pip install -r requirements.txt
    
    - name: Run security checks with bandit
      run: bandit -r apps/ jobraker/ -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: safety check --json --output safety-report.json || true
    
    - name: Code formatting check
      run: |
        black --check --diff apps/ jobraker/
        isort --check-only --diff apps/ jobraker/
    
    - name: Lint with flake8
      run: |
        flake8 apps/ jobraker/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 apps/ jobraker/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_jobraker
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django pytest-cov
    
    - name: Set up test environment
      run: |
        cp .env.example .env.test
        echo "DJANGO_SETTINGS_MODULE=jobraker.settings.testing" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_jobraker" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/1" >> .env.test
    
    - name: Run database migrations
      env:
        DJANGO_SETTINGS_MODULE: jobraker.settings.testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_jobraker
        REDIS_URL: redis://localhost:6379/1
      run: |
        python manage.py migrate
    
    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: jobraker.settings.testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_jobraker
        REDIS_URL: redis://localhost:6379/1
      run: |
        coverage run --source='.' manage.py test
        coverage xml
        coverage report
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl, terraform, ansible, etc.
    
    - name: Run health checks
      run: |
        sleep 30  # Wait for deployment
        curl -f https://staging.jobraker.com/api/v1/notifications/health/ || exit 1
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Staging deployment completed"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Run production health checks
      run: |
        sleep 60  # Wait for deployment
        curl -f https://api.jobraker.com/api/v1/notifications/health/production/ || exit 1
    
    - name: Run smoke tests
      run: |
        # Run critical path tests
        curl -f https://api.jobraker.com/api/v1/notifications/test/ \
          -H "Content-Type: application/json" \
          -d '{"test_type": "email"}' || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Production deployment failed! Initiating rollback..."
        # Add rollback commands here

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        # Create basic performance test
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';
        
        export const options = {
          stages: [
            { duration: '30s', target: 20 },
            { duration: '1m', target: 20 },
            { duration: '30s', target: 0 },
          ],
        };
        
        export default function () {
          const response = http.get('https://staging.jobraker.com/api/v1/notifications/health/');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF
        
        k6 run performance-test.js

  # Monitoring and Alerting
  monitor:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure monitoring alerts
      run: |
        echo "Setting up production monitoring..."
        # Configure monitoring tools like Prometheus, Grafana, etc.
    
    - name: Test alerting
      run: |
        echo "Testing alert systems..."
        # Test that alerts are working correctly
